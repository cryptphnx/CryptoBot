//Noro
//2019

//@version=5
strategy(title='Robot WhiteBox Iceberg', shorttitle='Robot WhiteBox Iceberg', overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100, pyramiding=3)

//Settings
capital = input.int(100, defval=100, minval=1, maxval=10000, title='Lot')
len = input.int(3, minval=1, title='MA Length')
s = input.string(defval='7. OHLC4', options=['1. Open', '2. High', '3. Low', '4. Close', '5. HL2', '6. HLC3', '7. OHLC4', '8. OC2', '9. PCMA'], title='Data')
short3 = input(true, title='short 3')
short2 = input(true, title='short 2')
short1 = input(true, title='short 1')
long1 = input(true, title='long 1')
long2 = input(true, title='long 2')
long3 = input(true, title='long 3')
sl = (input.float(1, title='stop', minval = 0.1, step = 0.5)) / 100
PosAmountPercent= input.float(50, "Pos Size % of Total Equity", minval = 1, step=1, tooltip='Same As Order Size in the properties tab')
shortlevel3 = input(6.0, title='Short line 3')
shortlevel2 = input(4.0, title='Short line 2')
shortlevel1 = input(2.0, title='Short line 1')
longlevel1 = input(-2.0, title='Long line 1')
longlevel2 = input(-4.0, title='Long line 2')
longlevel3 = input(-6.0, title='Long line 3')
needoffset = input(true, title='Offset')
fromyear = input.int(1900, defval=1900, minval=1900, maxval=2100, title='From Year')
toyear = input.int(2100, defval=2100, minval=1900, maxval=2100, title='To Year')
frommonth = input.int(01, defval=01, minval=01, maxval=12, title='From Month')
tomonth = input.int(12, defval=12, minval=01, maxval=12, title='To Month')
fromday = input.int(01, defval=01, minval=01, maxval=31, title='From day')
today = input.int(31, defval=31, minval=01, maxval=31, title='To day')

//Variables
lots = 0.0
size = strategy.position_size
mult = 1 / syminfo.mintick
needtime = time > timestamp(fromyear, frommonth, fromday, 00, 00) and time < timestamp(toyear, tomonth, today, 23, 59)

//MA
oc2 = (open + close) / 2
pcma = (ta.highest(high, len) + ta.lowest(low, len)) / 2
src = s == '1. Open' ? open : s == '2. High' ? high : s == '3. Low' ? low : s == '4. Close' ? close : s == '5. HL2' ? hl2 : s == '6. HLC3' ? hlc3 : s == '7. OHLC4' ? ohlc4 : s == '8. OC2' ? oc2 : close
sma = ta.sma(src, len)
ma = s == '9. PCMA' ? math.round(pcma * mult) / mult : math.round(sma * mult) / mult

//Levels
longline1 = 0.0
longline2 = 0.0
longline3 = 0.0
shortline1 = 0.0
shortline2 = 0.0
shortline3 = 0.0
longline1 := long1 ? math.round(ma * ((100 + longlevel1) / 100) * mult) / mult : close
longline2 := lots[1] == 0 ? long2 ? math.round(ma * ((100 + longlevel2) / 100) * mult) / mult : close : longline2[1]
longline3 := lots[1] == 0 ? long3 ? math.round(ma * ((100 + longlevel3) / 100) * mult) / mult : close : longline3[1]
shortline1 := short1 ? math.round(ma * ((100 + shortlevel1) / 100) * mult) / mult : close
shortline2 := lots[1] == 0 ? short2 ? math.round(ma * ((100 + shortlevel2) / 100) * mult) / mult : close : shortline2[1]
shortline3 := lots[1] == 0 ? short3 ? math.round(ma * ((100 + shortlevel3) / 100) * mult) / mult : close : shortline3[1]

//Lines
colorlong1 = long1 ? color.lime : na
colorlong2 = long2 ? color.lime : na
colorlong3 = long3 ? color.lime : na
colorshort1 = short1 ? color.red : na
colorshort2 = short2 ? color.red : na
colorshort3 = short3 ? color.red : na
offset = needoffset ? 1 : 0
plot(shortline3, offset=offset, color=colorshort3, title='Short line 3')
plot(shortline2, offset=offset, color=colorshort2, title='Short line 2')
plot(shortline1, offset=offset, color=colorshort1, title='Short line 1')
plot(ma, offset=offset, color=color.new(color.blue, 0), title='MA line')
plot(longline1, offset=offset, color=colorlong1, title='Long line 1')
plot(longline2, offset=offset, color=colorlong2, title='Long line 2')
plot(longline3, offset=offset, color=colorlong3, title='Long line 3')


// === Alertatron KEY ===//
//alertatron_key_enter_long  = 'cancel(which=all);market(position=0);market(side=buy, amount=' + str.tostring(PosAmountPercent) + '%);stopOrder(side=sell, amount=100%p, offset=@' + str.tostring(stop_long) + ', trigger=last, tag=stop' + str.tostring(syminfo.ticker) + ', reduceOnly=true);'
//alertatron_key_tsl_long     = 'limit(position=0, offset=' + str.tostring(trail_offset_usd) + ', reduceOnly=true);'
//alertatron_key_exit_long   = 'market(position=0);'
//alertatron_key_enter_short = 'cancel(which=all);market(position=0);market(side=sell, amount=' + str.tostring(PosAmountPercent) + '%);stopOrder(side=buy, amount=100%p, offset=@' + str.tostring(stop_short) + ', trigger=last, tag=stop' + str.tostring(syminfo.ticker) + ', reduceOnly=true);'
//alertatron_key_tsl_short    = 'limit(position=0, offset=' + str.tostring(trail_offset_usd) + ', reduceOnly=true);'
//alertatron_key_exit_short  = 'market(position=0);'

//Trading
lot = 0.0
lot := size == 0 ? strategy.equity / close * capital / 100 : lot[1]
if ma > 0
    lots := math.round(size / lot)
    strategy.entry('L1', strategy.long, lot, limit=longline1, when=lots == 0 and long1 and needtime, alert_message='testL1')
    lots := math.round(size / lot)
    strategy.entry('L2', strategy.long, lot, limit=longline2, when=lots <= 1 and long2 and needtime, alert_message='testL2')
    lots := math.round(size / lot)
    strategy.entry('L3', strategy.long, lot, limit=longline3, when=lots <= 2 and long3 and needtime, alert_message='testL3')
    lots := math.round(size / lot)
    strategy.entry('S1', strategy.short, lot, limit=shortline1, when=lots == 0 and short1 and needtime, alert_message='testS1')
    lots := math.round(size / lot)
    strategy.entry('S2', strategy.short, lot, limit=shortline2, when=lots >= -1 and short2 and needtime, alert_message='testS2')
    lots := math.round(size / lot)
    strategy.entry('S3', strategy.short, lot, limit=shortline3, when=lots >= -2 and short3 and needtime, alert_message='testS3')
if size > 0
    strategy.entry('TPL', strategy.short, 0, limit=ma, when=needtime, alert_message='testTPL2')
if size < 0
    strategy.entry('TPS', strategy.long, 0, limit=ma, when=needtime, alert_message='testTPS2')
if time > timestamp(toyear, tomonth, today, 23, 59)
    strategy.close_all()
    strategy.cancel('L1')
    strategy.cancel('L2')
    strategy.cancel('L3')
    strategy.cancel('S1')
    strategy.cancel('S2')
    strategy.cancel('S3')
    strategy.cancel('TPL')
    strategy.cancel('TPS')

